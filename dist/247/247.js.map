{"version":3,"file":"247/247.js","mappings":"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","sources":["webpack://chocolatestore/./src/pages/order-payment/order-payment.css?2bff","webpack://chocolatestore/./src/pages/order-payment/order-payment.component.tsx","webpack://chocolatestore/./src/pages/stripe-order-wrapper/stripe-order-wrapper.component.tsx","webpack://chocolatestore/./src/pages/order-payment/order-payment.css"],"sourcesContent":["import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./order-payment.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import * as React from 'react';\nimport './order-payment.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCartTotal } from '../../features/cart/selectors';\nimport { authHeader } from '../../features/user/api';\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { selectShippingInfo } from '../../features/user/selectors';\nimport { clearCart } from '../../features/cart/cartSlice';\nimport { ORDER_URL } from '../../features/order/api';\nimport { clearCartDB } from '../../features/cart/thunks';\nimport { OrderStatus } from '../../features/order/orderSlice';\nimport { create as createOrder } from '../../features/order/thunks';\nimport { paymentSuccess } from '../../features/alert/alertSlice';\nimport { StripeCardElementChangeEvent } from '@stripe/stripe-js';\n\nconst OrderPayment = (): JSX.Element => {\n  const dispatch = useDispatch();\n  const [payment, setPayment] = useState({\n    success: false,\n    submitted: false,\n    payment_method_submit: false,\n    payment_method: '',\n    value: '',\n    status: '',\n    paymentIntent: {},\n    submitCount: 0,\n    accepted: false,\n  });\n  const [error, setError] = useState('');\n\n  const CARD_OPTIONS = {\n    disabled: false,\n    iconStyle: 'solid' as const,\n    style: {\n      base: {\n        iconColor: '#6772e5',\n        color: '#6772e5',\n        fontWeight: 600,\n        fontFamily: 'Montserrat, Open Sans, Segoe UI, sans-serif',\n        fontSize: '10px',\n        fontSmoothing: 'antialiased',\n        ':-webkit-autofill': {\n          color: '#6772e5',\n        },\n        '::placeholder': {\n          color: '#6772e5',\n        },\n      },\n      invalid: {\n        iconColor: '#ffc7ee',\n        color: '#ffc7ee',\n      },\n    },\n  };\n\n  const { push } = useHistory();\n  const total = useSelector(selectCartTotal);\n  const shippingInfo = useSelector(selectShippingInfo);\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleMethod = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    if ((event.currentTarget.elements.namedItem('method') as HTMLInputElement).value === 'stripe') {\n      setPayment({ ...payment, payment_method: 'stripe', payment_method_submit: true });\n    } else if (\n      (event.currentTarget.elements.namedItem('method') as HTMLInputElement).value === 'paypal'\n    ) {\n      setPayment({ ...payment, payment_method: 'paypal', payment_method_submit: true });\n    }\n  };\n\n  const stripeElementChange = (e: StripeCardElementChangeEvent) => {\n    if (payment.submitted && e.empty) {\n      setError('Do not submit an empty form!');\n    }\n    if (e.error) {\n      setPayment({ ...payment, status: 'error' });\n      setError(e.error.message ?? 'An unknown error occured');\n    }\n    if (!e.empty && e.complete) {\n      setPayment({ ...payment, accepted: true });\n    }\n  };\n\n  const handlePayment: React.FormEventHandler<HTMLFormElement> = async (e): Promise<void> => {\n    e.preventDefault();\n\n    if (payment.submitCount >= 4) {\n      setError('Too many submits, please wait for response');\n      setTimeout(() => setPayment({ ...payment, submitCount: 0, submitted: false }), 2000);\n    }\n    if (payment.submitCount >= 10) {\n      setError('Do not spam the prompt!');\n    }\n    setPayment({ ...payment, submitted: true, submitCount: payment.submitCount + 1 });\n    if (!stripe || !elements) return;\n    if (!e.currentTarget.reportValidity()) return;\n    if (!payment.accepted) {\n      setError('Finish payment information!');\n      return;\n    }\n    const cardElement = elements && elements.getElement(CardElement);\n\n    if (shippingInfo && payment.accepted === true)\n      dispatch(\n        createOrder({\n          total_price: total,\n          status: OrderStatus.UNPAID,\n          address: shippingInfo.address,\n          country: shippingInfo.country,\n          city: shippingInfo.city,\n          postalcode: shippingInfo.postalcode,\n        })\n      );\n\n    /* Create payment intent on the server */\n    const res = await axios.post(\n      ORDER_URL + 'create-payment-intent',\n      { amount: total, currency: 'usd', payment_method_types: 'card' },\n      {\n        headers: authHeader(),\n      }\n    );\n\n    if (payment.accepted) {\n      setError('Processing payment...');\n    }\n\n    if (res.status === 500) {\n      setError(res.data.message);\n      setPayment({ ...payment, status: 'error' });\n      return;\n    }\n\n    if (!cardElement) return;\n    /* Confirm the payment on the client */\n    const { error, paymentIntent } = await stripe?.confirmCardPayment(res.data.client_secret, {\n      payment_method: {\n        card: cardElement,\n      },\n    });\n\n    if (error) {\n      setPayment({ ...payment, status: 'error' });\n      setError(error.message ?? 'An unknown error occured');\n    } else if (paymentIntent) {\n      setPayment({ ...payment, paymentIntent: paymentIntent });\n    }\n\n    if (paymentIntent && paymentIntent.status === 'succeeded') {\n      dispatch(paymentSuccess());\n      dispatch(clearCart());\n      dispatch(clearCartDB());\n      setTimeout(() => push('/purchase-confirmed'), 500);\n    }\n  };\n\n  return (\n    <div className='order-payment'>\n      <h3 id='stripe-notice'>\n        Use <i id='stripe-testnums'>4242 4242 4242 4242</i> for stripe to test the payment\n      </h3>\n      <div className='order-payment__wrapper'>\n        {!payment.payment_method_submit ? (\n          <form onSubmit={handleMethod}>\n            <legend>Select payment method</legend>\n            <fieldset>\n              <input type='radio' id='stripe' name='method' value='stripe' />\n              <label htmlFor='stripe'>Stripe</label>\n            </fieldset>\n            <input type='submit' value='Submit' />\n          </form>\n        ) : payment.payment_method_submit && payment.payment_method === 'stripe' ? (\n          <div className='payment-stripe'>\n            <form onSubmit={handlePayment}>\n              <fieldset className='elements-style'>\n                <legend>Card details:</legend>\n                <div className='FormRow elements-style'>\n                  <CardElement options={CARD_OPTIONS} onChange={stripeElementChange} />\n                </div>\n                <button\n                  className='elements-style'\n                  disabled={payment.submitted ? true : false}\n                  onClick={() =>\n                    setPayment({\n                      ...payment,\n                      submitted: true,\n                      submitCount: payment.submitCount + 1,\n                    })\n                  }\n                >\n                  Pay ${total}\n                </button>\n              </fieldset>\n            </form>\n          </div>\n        ) : null}\n        <div className='order-payment__error-prompt'>\n          <p>{error}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderPayment;\n","import { Elements } from '@stripe/react-stripe-js';\nimport * as React from 'react';\nimport OrderPayment from '../order-payment/order-payment.component';\nimport { loadStripe } from '@stripe/stripe-js';\n\nconst ELEMENTS_OPTIONS = {\n  fonts: [{ cssSrc: 'https://fonts.googleapis.com/css?family=Montserrat' }],\n};\nconst stripePromise = loadStripe(\n  'pk_test_51HUuCuDiJxi7nioJsEusYP3Ty7hbKaquESZBYVkCuY3g9w2roo3BSMJMPK529s7EIIcBsSxhV6Ym9xFzwCHM0Q9L00KOmEYf1f'\n);\n\nconst StripeOrderWrapper = (): JSX.Element => {\n  return (\n    <>\n      <Elements stripe={stripePromise} options={ELEMENTS_OPTIONS}>\n        <OrderPayment />\n      </Elements>\n    </>\n  );\n};\n\nexport default StripeOrderWrapper;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".order-payment {\\n  display: grid;\\n  justify-content: center;\\n  height: 100vh;\\n  background: #38242c;\\n  font-family: 'Montserrat', sans-serif;\\n}\\n\\n.order-payment__wrapper {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 50vw;\\n  align-items: center;\\n  padding: 45px 25px;\\n}\\n\\n.order-payment__wrapper form {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  border: 1px solid black;\\n  padding: 20px;\\n  background-color: #fffffe;\\n}\\n\\n.order-payment__wrapper form input {\\n  padding: 10px;\\n  margin: 1em 0.4em 1em 2em;\\n}\\n\\n.order-payment__wrapper form input[type=radio] {\\n  padding: 5px;\\n  cursor: pointer;\\n}\\n\\n.order-payment__wrapper form label {\\n  font-size: 1.4em;\\n  font-weight: bold;\\n  cursor: pointer;\\n  color: #5f6c7b;\\n}\\n\\n.order-payment__wrapper input[type=submit] {\\n  font-size: 1.2em;\\n  padding: 1em;\\n  margin: 1em;\\n  width: 15em;\\n  background: #3da9fc;\\n  color: white;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  transition: 500ms ease-in;\\n}\\n\\n.order-payment__wrapper input[type=submit]:hover {\\n  background: orange;\\n}\\n\\n.order-payment__wrapper form legend {\\n  font-family: 'Montserrat', sans-serif;\\n  font-size: 1.6em;\\n  font-weight: 500;\\n  padding: 1em;\\n  color: #5f6c7b;\\n}\\n\\n.order-payment__error-prompt p {\\n  font-size: 1.3em;\\n  padding: 1.5em;\\n  color: #ef4565;\\n}\\n\\n/* -- Stripe Wrapper -- */\\n\\n.payment-stripe {\\n  position: relative;\\n  border: 3px solid #6772e5;\\n  background-color: white;\\n  width: 70%;\\n}\\n\\n.payment-stripe form {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  padding: 2rem;\\n}\\n\\n.payment-stripe legend {\\n  font-size: 1em;\\n  font-weight: 600;\\n}\\n\\n/* -- Stripe Elements Styling -- */\\n\\n.elements-style {\\n  padding: .5em;\\n  color: #6772e5;\\n  border: 1px solid #6772e5;\\n  width: inherit;\\n}\\n\\n.FormRow {\\n  border: 1px solid #6772e5;\\n  padding: 10px;\\n  border-radius: 6px;\\n  width: inherit;\\n}\\n\\n.payment-stripe button {\\n  display: block;\\n  font-family: 'Montserrat', sans-serif;\\n  font-size: 1.2em;\\n  margin-top: 1em;\\n  padding: .5em;\\n  width: 100%;\\n  color: white;\\n  background-color: #6772e5;\\n  cursor: pointer;\\n}\\n\\n@media (max-width: 1350px) {\\n  .payment-stripe {\\n    width: 85%;\\n  }\\n}\\n\\n@media (max-width: 1280px) {\\n  .payment-stripe {\\n    width: 90%;\\n  }\\n}\\n\\n@media (max-width: 1205px) {\\n  .payment-stripe {\\n    width: 100%;\\n  }\\n}\\n\\n@media (max-width: 1100px) {\\n  .order-payment__wrapper {\\n    width: 65vw;\\n    border: 1px solid white;\\n  }\\n  .payment-stripe {\\n    width: 90%;\\n  }\\n}\\n\\n@media (max-width: 940px) {\\n  .order-payment__wrapper {\\n    width: 85vw;\\n    border: 1px solid white;\\n  }\\n}\\n\\n@media (max-width: 720px) {\\n  .order-payment__wrapper {\\n    width: 95vw;\\n    border: 1px solid white;\\n  }\\n  .payment-stripe {\\n    width: 100%;\\n  }\\n}\\n\\n@media (max-width: 580px) {\\n  .order-payment__wrapper {\\n    width: 100vw;\\n    border: 1px solid white;\\n  }\\n  .payment-stripe {\\n    width: 100vw;\\n  }\\n}\\n\\n#stripe-notice {\\n  position: absolute;\\n  top: 3.5rem;\\n  left: 50%;\\n  transform: translate(-50%, 0);\\n  color: white;\\n}\\n\\n#stripe-testnums {\\n  font-size: 1.2rem;\\n  font-style: italic;\\n  margin-left: 0.35rem;\\n  margin-right: 0.35rem;\\n  color: yellow;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/pages/order-payment/order-payment.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,aAAa;EACb,mBAAmB;EACnB,qCAAqC;AACvC;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,WAAW;EACX,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,uBAAuB;EACvB,aAAa;EACb,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,yBAAyB;AAC3B;;AAEA;EACE,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,WAAW;EACX,WAAW;EACX,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,qCAAqC;EACrC,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,cAAc;AAChB;;AAEA,yBAAyB;;AAEzB;EACE,kBAAkB;EAClB,yBAAyB;EACzB,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA,kCAAkC;;AAElC;EACE,aAAa;EACb,cAAc;EACd,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,qCAAqC;EACrC,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE;IACE,UAAU;EACZ;AACF;;AAEA;EACE;IACE,UAAU;EACZ;AACF;;AAEA;EACE;IACE,WAAW;EACb;AACF;;AAEA;EACE;IACE,WAAW;IACX,uBAAuB;EACzB;EACA;IACE,UAAU;EACZ;AACF;;AAEA;EACE;IACE,WAAW;IACX,uBAAuB;EACzB;AACF;;AAEA;EACE;IACE,WAAW;IACX,uBAAuB;EACzB;EACA;IACE,WAAW;EACb;AACF;;AAEA;EACE;IACE,YAAY;IACZ,uBAAuB;EACzB;EACA;IACE,YAAY;EACd;AACF;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,6BAA6B;EAC7B,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB;EACpB,qBAAqB;EACrB,aAAa;AACf\",\"sourcesContent\":[\".order-payment {\\n  display: grid;\\n  justify-content: center;\\n  height: 100vh;\\n  background: #38242c;\\n  font-family: 'Montserrat', sans-serif;\\n}\\n\\n.order-payment__wrapper {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 50vw;\\n  align-items: center;\\n  padding: 45px 25px;\\n}\\n\\n.order-payment__wrapper form {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  border: 1px solid black;\\n  padding: 20px;\\n  background-color: #fffffe;\\n}\\n\\n.order-payment__wrapper form input {\\n  padding: 10px;\\n  margin: 1em 0.4em 1em 2em;\\n}\\n\\n.order-payment__wrapper form input[type=radio] {\\n  padding: 5px;\\n  cursor: pointer;\\n}\\n\\n.order-payment__wrapper form label {\\n  font-size: 1.4em;\\n  font-weight: bold;\\n  cursor: pointer;\\n  color: #5f6c7b;\\n}\\n\\n.order-payment__wrapper input[type=submit] {\\n  font-size: 1.2em;\\n  padding: 1em;\\n  margin: 1em;\\n  width: 15em;\\n  background: #3da9fc;\\n  color: white;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  transition: 500ms ease-in;\\n}\\n\\n.order-payment__wrapper input[type=submit]:hover {\\n  background: orange;\\n}\\n\\n.order-payment__wrapper form legend {\\n  font-family: 'Montserrat', sans-serif;\\n  font-size: 1.6em;\\n  font-weight: 500;\\n  padding: 1em;\\n  color: #5f6c7b;\\n}\\n\\n.order-payment__error-prompt p {\\n  font-size: 1.3em;\\n  padding: 1.5em;\\n  color: #ef4565;\\n}\\n\\n/* -- Stripe Wrapper -- */\\n\\n.payment-stripe {\\n  position: relative;\\n  border: 3px solid #6772e5;\\n  background-color: white;\\n  width: 70%;\\n}\\n\\n.payment-stripe form {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  padding: 2rem;\\n}\\n\\n.payment-stripe legend {\\n  font-size: 1em;\\n  font-weight: 600;\\n}\\n\\n/* -- Stripe Elements Styling -- */\\n\\n.elements-style {\\n  padding: .5em;\\n  color: #6772e5;\\n  border: 1px solid #6772e5;\\n  width: inherit;\\n}\\n\\n.FormRow {\\n  border: 1px solid #6772e5;\\n  padding: 10px;\\n  border-radius: 6px;\\n  width: inherit;\\n}\\n\\n.payment-stripe button {\\n  display: block;\\n  font-family: 'Montserrat', sans-serif;\\n  font-size: 1.2em;\\n  margin-top: 1em;\\n  padding: .5em;\\n  width: 100%;\\n  color: white;\\n  background-color: #6772e5;\\n  cursor: pointer;\\n}\\n\\n@media (max-width: 1350px) {\\n  .payment-stripe {\\n    width: 85%;\\n  }\\n}\\n\\n@media (max-width: 1280px) {\\n  .payment-stripe {\\n    width: 90%;\\n  }\\n}\\n\\n@media (max-width: 1205px) {\\n  .payment-stripe {\\n    width: 100%;\\n  }\\n}\\n\\n@media (max-width: 1100px) {\\n  .order-payment__wrapper {\\n    width: 65vw;\\n    border: 1px solid white;\\n  }\\n  .payment-stripe {\\n    width: 90%;\\n  }\\n}\\n\\n@media (max-width: 940px) {\\n  .order-payment__wrapper {\\n    width: 85vw;\\n    border: 1px solid white;\\n  }\\n}\\n\\n@media (max-width: 720px) {\\n  .order-payment__wrapper {\\n    width: 95vw;\\n    border: 1px solid white;\\n  }\\n  .payment-stripe {\\n    width: 100%;\\n  }\\n}\\n\\n@media (max-width: 580px) {\\n  .order-payment__wrapper {\\n    width: 100vw;\\n    border: 1px solid white;\\n  }\\n  .payment-stripe {\\n    width: 100vw;\\n  }\\n}\\n\\n#stripe-notice {\\n  position: absolute;\\n  top: 3.5rem;\\n  left: 50%;\\n  transform: translate(-50%, 0);\\n  color: white;\\n}\\n\\n#stripe-testnums {\\n  font-size: 1.2rem;\\n  font-style: italic;\\n  margin-left: 0.35rem;\\n  margin-right: 0.35rem;\\n  color: yellow;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["dispatch","useDispatch","useState","success","submitted","payment_method_submit","payment_method","value","status","paymentIntent","submitCount","accepted","payment","setPayment","error","setError","push","useHistory","total","useSelector","selectCartTotal","shippingInfo","selectShippingInfo","stripe","useStripe","elements","useElements","handlePayment","e","preventDefault","setTimeout","currentTarget","reportValidity","cardElement","getElement","CardElement","createOrder","total_price","OrderStatus","address","country","city","postalcode","axios","ORDER_URL","amount","currency","payment_method_types","headers","authHeader","res","data","message","confirmCardPayment","client_secret","card","paymentSuccess","clearCart","clearCartDB","className","id","onSubmit","options","disabled","iconStyle","style","base","iconColor","color","fontWeight","fontFamily","fontSize","fontSmoothing","invalid","onChange","empty","complete","onClick","event","namedItem","type","name","htmlFor","ELEMENTS_OPTIONS","fonts","cssSrc","stripePromise","loadStripe","Elements","___CSS_LOADER_EXPORT___","module"],"sourceRoot":""}